// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CircleProgrammableWalletSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Alamofire
@_exported import CircleProgrammableWalletSDK
import CryptoKit
import DeviceKit
import Foundation
import IQKeyboardManagerSwift
import LocalAuthentication
import SDWebImage
import Security
import SnapKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct ApiError : Swift.Error {
  public let errorCode: CircleProgrammableWalletSDK.ApiError.ErrorCode
  public let errorString: Swift.String
  public var displayString: Swift.String {
    get
  }
}
extension CircleProgrammableWalletSDK.ApiError {
  public enum ErrorCode : Swift.Int {
    case unknown
    case success
    case apiParameterMissing
    case apiParameterInvalid
    case forbidden
    case unauthorized
    case retry
    case customerSuspended
    case pending
    case invalidSession
    case invalidPartnerId
    case invalidMessage
    case invalidPhone
    case walletIdNotFound
    case tokenIdNotFound
    case transactionIdNotFound
    case walletSetIdNotFound
    case notEnoughFounds
    case notEnoughBalance
    case exceedWithdrawLimit
    case minimumFundsRequired
    case invalidTransactionFee
    case rejectedOnAmlScreening
    case tagRequired
    case gasLimitTooLow
    case transactionDataNotEncodedProperly
    case fullNodeReturnedError
    case walletSetupRequired
    case lowerThenMinimumAccountBalance
    case rejectedByBlockchain
    case droppedAsPartOfReorg
    case operationNotSupport
    case amountBelowMinimum
    case wrongNftTokenIdNumber
    case invalidDestinationAddress
    case tokenWalletChainMismatch
    case wrongAmountsNumber
    case userAlreadyExisted
    case userNotFound
    case userTokenNotFound
    case userTokenExpired
    case invalidUserToken
    case userWasInitialized
    case userHasSetPin
    case userHasSetSecurityQuestion
    case userWasDisabled
    case userDoesNotSetPinYet
    case userDoesNotSetSecurityQuestionYet
    case incorrectUserPin
    case incorrectDeviceId
    case incorrectAppId
    case incorrectSecurityAnswers
    case invalidChallengeId
    case invalidApproveContent
    case invalidEncryptionKey
    case userPinLocked
    case securityAnswersLocked
    case walletIsFrozen
    case maxWalletLimitReached
    case walletSetIdMutuallyExclusive
    case metadataUnmatched
    case userCanceled
    case launchUiFailed
    case pinCodeNotMatched
    case insecurePinCode
    case hintsMatchAnswers
    case networkError
    case biometricsSettingNotEnabled
    case deviceNotSupportBiometrics
    case biometricsKeyPermanentlyInvalidated
    case biometricsUserSkip
    case biometricsUserDisableForPin
    case biometricsUserLockout
    case biometricsUserLockoutPermanent
    case biometricsUserNotAllowPermission
    case biometricsInternalError
    case userSecretMissing
    case invalidUserSecret
    public var description: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BasePINInputViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) public var titleStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var titleLabelsStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var titleLabel1: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var titleLabel2: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var errorMessageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) public var showPINButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var buttonsStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) public var forgotPINButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) public var biometricsButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.BasePINInputViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc @_Concurrency.MainActor(unsafe) dynamic public func textFieldDidChange(_ textField: UIKit.UITextField)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) public var baseNaviTitleLabel: UIKit.UILabel
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension LocalAuthentication.LAContext {
  @objc dynamic open func getBiometricType() -> LocalAuthentication.LABiometryType
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class BiometricsPromptViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) final public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public var promptStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var promptTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var promptSubtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var buttonStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var continueButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public var skipButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public var dontAskButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
public enum ChallengeStatus : Swift.String, Swift.Decodable {
  case UNKNOWN
  case PENDING
  case IN_PROGRESS
  case COMPLETE
  case FAILED
  case EXPIRED
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChallengeType : Swift.String, Swift.Decodable {
  case UNKNOWN
  case SET_PIN
  case CHANGE_PIN
  case RESTORE_PIN
  case SET_SECURITY_QUESTIONS
  case SET_BIOMETRICS_PIN
  case CREATE_WALLET
  case CREATE_TRANSACTION
  case ACCELERATE_TRANSACTION
  case CANCEL_TRANSACTION
  case CONTRACT_EXECUTION
  case SIGN_MESSAGE
  case SIGN_TYPEDDATA
  case SIGN_TRANSACTION
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class ConfirmPINCodeViewController : CircleProgrammableWalletSDK.BasePINInputViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.ConfirmPINCodeViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func textFieldDidChange(_ textField: UIKit.UITextField)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class EnterPINCodeViewController : CircleProgrammableWalletSDK.BasePINInputViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.EnterPINCodeViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func textFieldDidChange(_ textField: UIKit.UITextField)
}
public protocol ErrorMessenger {
  func getErrorString(_ code: CircleProgrammableWalletSDK.ApiError.ErrorCode) -> Swift.String?
}
public typealias ExecuteCompletion = ((CircleProgrammableWalletSDK.ExecuteCompletionStruct) -> Swift.Void)
public struct ExecuteCompletionStruct {
  public let challenges: [Swift.String]
  public let result: Swift.Result<CircleProgrammableWalletSDK.ExecuteResult, CircleProgrammableWalletSDK.ApiError>
  public let onErrorController: UIKit.UINavigationController?
  public let onWarning: CircleProgrammableWalletSDK.ExecuteWarning?
}
public struct ExecuteResult {
  public let resultType: CircleProgrammableWalletSDK.ChallengeType
  public let status: CircleProgrammableWalletSDK.ChallengeStatus
  public var data: CircleProgrammableWalletSDK.ExecuteResult.ExecuteResultData? {
    get
  }
  public struct ExecuteResultData : Swift.Decodable {
    public let signature: Swift.String?
    public let signedTransaction: Swift.String?
    public let txHash: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct ExecuteWarning {
  public let warningType: CircleProgrammableWalletSDK.ExecuteWarning.WarningType
  public var warningString: Swift.String
}
extension CircleProgrammableWalletSDK.ExecuteWarning {
  public enum WarningType : Swift.Int {
    case deviceNotSupportBiometrics
    case biometricsKeyPermanentlyInvalidated
    case biometricsUserSkip
    case biometricsUserDisableForPin
    case biometricsUserLockout
    case biometricsUserLockoutPermanent
    case biometricsUserNotAllowPermission
    case biometricsInternalError
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public struct ImageStore {
  public enum Img {
    case naviClose
    case naviBack
    case dropdownArrow
    case selectCheckMark
    case errorInfo
    case securityIntroMain
    case securityConfirmMain
    case biometricsAllowMain
    case showPin
    case hidePin
    case swipeItemIcon
    case swipeBtConfirmed
    public static func == (a: CircleProgrammableWalletSDK.ImageStore.Img, b: CircleProgrammableWalletSDK.ImageStore.Img) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(local: [CircleProgrammableWalletSDK.ImageStore.Img : UIKit.UIImage], remote: [CircleProgrammableWalletSDK.ImageStore.Img : Foundation.URL])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class InputTextField : CircleProgrammableWalletSDK.PaddedTextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol JWT {
  var header: [Swift.String : Any] { get }
  var body: [Swift.String : Any] { get }
  var signature: Swift.String? { get }
  var string: Swift.String { get }
  var userId: Swift.String? { get }
}
extension CircleProgrammableWalletSDK.JWT {
  public func claim(name: Swift.String) -> CircleProgrammableWalletSDK.Claim
}
public struct Claim {
  public var string: Swift.String? {
    get
  }
}
public enum JWTDecodeError : Foundation.LocalizedError, Swift.CustomDebugStringConvertible, Swift.Equatable {
  case invalidBase64URL(Swift.String)
  case invalidJSON(Swift.String)
  case invalidPartCount(Swift.String, Swift.Int)
  public var debugDescription: Swift.String {
    get
  }
  public static func == (a: CircleProgrammableWalletSDK.JWTDecodeError, b: CircleProgrammableWalletSDK.JWTDecodeError) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class NewPINCodeViewController : CircleProgrammableWalletSDK.BasePINInputViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
extension CircleProgrammableWalletSDK.NewPINCodeViewController {
  @_Concurrency.MainActor(unsafe) @objc override final public func textFieldDidChange(_ textField: UIKit.UITextField)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class PaddedLabel : UIKit.UILabel {
  @_Concurrency.MainActor(unsafe) @objc override final public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class PaddedTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) public var textInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func drawText(in rect: CoreFoundation.CGRect)
  @objc deinit
}
public enum RandomError : Swift.Error {
  case secRandomCopy
  public static func == (a: CircleProgrammableWalletSDK.RandomError, b: CircleProgrammableWalletSDK.RandomError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class RecoverPINCodeTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var questionHintStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var hintStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var hintTitleLabel: CircleProgrammableWalletSDK.PaddedLabel
  @_Concurrency.MainActor(unsafe) final public var answerStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var answerTitleStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var answerTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var answerMarkLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var cellBottomLineView: UIKit.UIView
  @objc deinit
}
extension CircleProgrammableWalletSDK.RecoverPINCodeTableViewCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class RecoverPINCodeViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) final public var titleContentView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var titleContentStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var titleLabelsStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var titleLabel1: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var titleLabel2: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var errorMessageView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var errorImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public var errorMessageLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var tableView: UIKit.UITableView
  @_Concurrency.MainActor(unsafe) final public var confirmButtonBgView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var confirmButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLayoutSubviews()
  @objc deinit
}
extension CircleProgrammableWalletSDK.RecoverPINCodeViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
public struct SecurityConfirmItem {
  public init(image: UIKit.UIImage? = nil, imageUrl: Foundation.URL? = nil, text: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SecurityConfirmViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) final public var scrollView: UIKit.UIScrollView
  @_Concurrency.MainActor(unsafe) final public var scrollStackViewContainer: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var imageBgView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public var tipsStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var tipsTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var agreeStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var agreeTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var agreeTextField: CircleProgrammableWalletSDK.PaddedTextField
  @_Concurrency.MainActor(unsafe) final public var continueButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.SecurityConfirmViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SecurityIntrosViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) final public var introImageView: UIKit.UIImageView
  @_Concurrency.MainActor(unsafe) final public var titleStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var titleLabel1: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var titleLabel2: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var introsStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var introDescLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var introLinkButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public var continueButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public var introURL: Foundation.URL?
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
public struct SecurityQuestion : Swift.Equatable {
  public enum InputType : Swift.Int {
    case text
    case datePicker
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(title: Swift.String, inputType: CircleProgrammableWalletSDK.SecurityQuestion.InputType)
  public static func == (a: CircleProgrammableWalletSDK.SecurityQuestion, b: CircleProgrammableWalletSDK.SecurityQuestion) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SecurityQuestionsViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) final public var tableView: UIKit.UITableView
  @_Concurrency.MainActor(unsafe) final public var nextButtonBgView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var nextButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
extension CircleProgrammableWalletSDK.SecurityQuestionsViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SecurityQuestionTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var questionStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var questionTitleStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var questionTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var questionMarkLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var questionView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var questionTrailingButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) final public var answerStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var answerTitleStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var answerTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var answerMarkLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var hintStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var hintTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var hintWarningLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var cellBottomLineView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
extension CircleProgrammableWalletSDK.SecurityQuestionTableViewCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SecuritySummaryTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var containerView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var questionTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var answerTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var hintTitleLabel: UIKit.UILabel
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SecuritySummaryViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) final public var tableView: UIKit.UITableView
  @_Concurrency.MainActor(unsafe) final public var continueButtonBgView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var continueButton: UIKit.UIButton
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
extension CircleProgrammableWalletSDK.SecuritySummaryViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SelectQuestionTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor(unsafe) final public var stackView: UIKit.UIStackView
  @_Concurrency.MainActor(unsafe) final public var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var checkmarkImage: UIKit.UIImageView
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SelectQuestionViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) final public var dividerView: UIKit.UIView
  @_Concurrency.MainActor(unsafe) final public var tableView: UIKit.UITableView
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
extension CircleProgrammableWalletSDK.SelectQuestionViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SwipeToConfirmButton : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) final public let label: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public let indicator: UIKit.UIActivityIndicatorView
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class SwipeToConfirmViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor(unsafe) final public var descriptionLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var errorLabel: UIKit.UILabel
  @_Concurrency.MainActor(unsafe) final public var swipeButton: CircleProgrammableWalletSDK.SwipeToConfirmButton
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
}
public struct ThemeConfig : Swift.Decodable {
  public let font: CircleProgrammableWalletSDK.ThemeConfig.ThemeFont?
  public let color: CircleProgrammableWalletSDK.ThemeConfig.ThemeColor?
  public init(from decoder: any Swift.Decoder) throws
}
extension CircleProgrammableWalletSDK.ThemeConfig {
  public struct ThemeFont : Swift.Decodable {
    public let ultraLight: Swift.String?
    public let thin: Swift.String?
    public let light: Swift.String?
    public let regular: Swift.String?
    public let medium: Swift.String?
    public let semibold: Swift.String?
    public let bold: Swift.String?
    public let heavy: Swift.String?
    public let black: Swift.String?
    public init(ultraLight: Swift.String? = nil, thin: Swift.String? = nil, light: Swift.String? = nil, regular: Swift.String? = nil, medium: Swift.String? = nil, semibold: Swift.String? = nil, bold: Swift.String? = nil, heavy: Swift.String? = nil, black: Swift.String? = nil)
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension CircleProgrammableWalletSDK.ThemeConfig {
  public struct ThemeColor : Swift.Decodable {
    public let background: Swift.String?, divider: Swift.String?
    public let success: Swift.String?, error: Swift.String?, errorBackground: Swift.String?
    public let textMain: Swift.String?, textMain2: Swift.String?
    public let textAuxiliary: Swift.String?, textAuxiliary2: Swift.String?
    public let textSummary: Swift.String?, textSummaryHighlight: Swift.String?
    public let textPlaceholder: Swift.String?
    public let textAction: Swift.String?, textActionPressed: Swift.String?
    public let textPrompt: Swift.String?, textPrompt2: Swift.String?
    public let pinDotBase: Swift.String?, pinDotBaseBorder: Swift.String?, pinDotActivated: Swift.String?
    public let pinDotFocused: Swift.String?
    public let inputBorder: Swift.String?, inputBorderFocused: Swift.String?, inputBackgroundDisabled: Swift.String?
    public let mainBTText: Swift.String?, mainBTTextPressed: Swift.String?, mainBTTextDisabled: Swift.String?
    public let mainBTBackground: Swift.String?, mainBTBackgroundPressed: Swift.String?, mainBTBackgroundDisabled: Swift.String?
    public let secondBTText: Swift.String?
    public let secondBTBorder: Swift.String?
    public let secondBTBackground: Swift.String?, secondBTBackgroundPressed: Swift.String?
    public let plainBTText: Swift.String?
    public let plainBTBackground: Swift.String?, plainBTBackgroundPressed: Swift.String?
    public let recoverPinHintTitle: Swift.String?, recoverPinHintTitleBg: Swift.String?, recoverPinHint: Swift.String?
    public let securityConfirmMainBg: Swift.String?
    public let swipeBtText: Swift.String?
    public let swipeBtMainBackground: Swift.String?
    public let swipeBtSecondaryBackground: Swift.String?
    public let swipeBtConfirmingIndicator: Swift.String?
    public let titleGradients: [Swift.String]?
    public init(from decoder: any Swift.Decoder) throws
  }
}
@_hasMissingDesignatedInitializers public class WalletSdk {
  public static let shared: CircleProgrammableWalletSDK.WalletSdk
  public var customUserAgent: Swift.String?
  public struct Configuration {
    public init(endPoint: Swift.String, appId: Swift.String, settingsManagement: CircleProgrammableWalletSDK.WalletSdk.SettingsManagement = .init())
  }
  public struct SettingsManagement {
    public init(enableBiometricsPin: Swift.Bool = false, disableConfirmationUI: Swift.Bool = false)
  }
  @objc deinit
}
extension CircleProgrammableWalletSDK.WalletSdk {
  public func setConfiguration(_ configuration: CircleProgrammableWalletSDK.WalletSdk.Configuration) throws
  public func setLayoutProvider(_ provider: any CircleProgrammableWalletSDK.WalletSdkLayoutProvider)
  public func setErrorMessenger(_ messenger: any CircleProgrammableWalletSDK.ErrorMessenger)
  public func setDelegate(_ delegate: any CircleProgrammableWalletSDK.WalletSdkDelegate)
  public func execute(userToken: Swift.String, encryptionKey: Swift.String, challengeIds: [Swift.String], completion: CircleProgrammableWalletSDK.ExecuteCompletion? = nil)
  public func executeWithUserSecret(userToken: Swift.String, encryptionKey: Swift.String, userSecret: Swift.String, challengeIds: [Swift.String], completion: CircleProgrammableWalletSDK.ExecuteCompletion? = nil)
  public func setBiometricsPin(userToken: Swift.String, encryptionKey: Swift.String, completion: CircleProgrammableWalletSDK.ExecuteCompletion? = nil)
  public func getDeviceId() -> Swift.String
  public func sdkVersion() -> Swift.String?
}
public protocol WalletSdkDelegate : AnyObject {
  func walletSdk(willPresentController controller: UIKit.UIViewController)
  func walletSdk(controller: UIKit.UIViewController, onForgetPINButtonSelected onSelect: Swift.Void)
}
public protocol WalletSdkLayoutProvider : AnyObject {
  func securityQuestions() -> [CircleProgrammableWalletSDK.SecurityQuestion]
  func securityQuestionsRequiredCount() -> Swift.Int
  func securityConfirmItems() -> [CircleProgrammableWalletSDK.SecurityConfirmItem]
  func imageStore() -> CircleProgrammableWalletSDK.ImageStore
  func themeFont() -> CircleProgrammableWalletSDK.ThemeConfig.ThemeFont?
  func displayDateFormat() -> Swift.String
}
extension CircleProgrammableWalletSDK.WalletSdkLayoutProvider {
  public func securityQuestions() -> [CircleProgrammableWalletSDK.SecurityQuestion]
  public func securityQuestionsRequiredCount() -> Swift.Int
  public func securityConfirmItems() -> [CircleProgrammableWalletSDK.SecurityConfirmItem]
  public func imageStore() -> CircleProgrammableWalletSDK.ImageStore
  public func themeFont() -> CircleProgrammableWalletSDK.ThemeConfig.ThemeFont?
  public func displayDateFormat() -> Swift.String
}
extension CircleProgrammableWalletSDK.ApiError.ErrorCode : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ApiError.ErrorCode : Swift.Hashable {}
extension CircleProgrammableWalletSDK.ApiError.ErrorCode : Swift.RawRepresentable {}
extension CircleProgrammableWalletSDK.ChallengeStatus : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ChallengeStatus : Swift.Hashable {}
extension CircleProgrammableWalletSDK.ChallengeStatus : Swift.RawRepresentable {}
extension CircleProgrammableWalletSDK.ChallengeType : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ChallengeType : Swift.Hashable {}
extension CircleProgrammableWalletSDK.ChallengeType : Swift.RawRepresentable {}
extension CircleProgrammableWalletSDK.ExecuteWarning.WarningType : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ExecuteWarning.WarningType : Swift.Hashable {}
extension CircleProgrammableWalletSDK.ExecuteWarning.WarningType : Swift.RawRepresentable {}
extension CircleProgrammableWalletSDK.ImageStore.Img : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ImageStore.Img : Swift.Hashable {}
extension CircleProgrammableWalletSDK.RandomError : Swift.Equatable {}
extension CircleProgrammableWalletSDK.RandomError : Swift.Hashable {}
extension CircleProgrammableWalletSDK.SecurityQuestion.InputType : Swift.Equatable {}
extension CircleProgrammableWalletSDK.SecurityQuestion.InputType : Swift.Hashable {}
extension CircleProgrammableWalletSDK.SecurityQuestion.InputType : Swift.RawRepresentable {}
