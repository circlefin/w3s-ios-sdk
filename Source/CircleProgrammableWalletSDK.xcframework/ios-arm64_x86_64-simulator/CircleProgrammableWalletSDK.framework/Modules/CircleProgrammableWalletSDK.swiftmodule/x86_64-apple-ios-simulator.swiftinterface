// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name CircleProgrammableWalletSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Alamofire
import AuthenticationServices
import BigInt
@_exported import CircleProgrammableWalletSDK
import CryptoKit
import DeviceKit
import FBSDKLoginKit
import Foundation
import GoogleSignIn
import IQKeyboardManagerSwift
import LocalAuthentication
import SDWebImage
import Security
import SnapKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension CircleProgrammableWalletSDK.ApiError {
  public enum ErrorCode {
    case undefined(code: Swift.Int)
    case unknown
    case success
    case apiParameterMissing
    case apiParameterInvalid
    case forbidden
    case unauthorized
    case retry
    case customerSuspended
    case pending
    case invalidSession
    case invalidPartnerId
    case invalidMessage
    case invalidPhone
    case walletIdNotFound
    case tokenIdNotFound
    case transactionIdNotFound
    case entityCredentialNotFound
    case walletSetIdNotFound
    case notEnoughFounds
    case notEnoughBalance
    case exceedWithdrawLimit
    case minimumFundsRequired
    case invalidTransactionFee
    case rejectedOnAmlScreening
    case tagRequired
    case gasLimitTooLow
    case transactionDataNotEncodedProperly
    case fullNodeReturnedError
    case walletSetupRequired
    case lowerThenMinimumAccountBalance
    case rejectedByBlockchain
    case droppedAsPartOfReorg
    case operationNotSupport
    case amountBelowMinimum
    case wrongNftTokenIdNumber
    case invalidDestinationAddress
    case tokenWalletChainMismatch
    case wrongAmountsNumber
    case userAlreadyExisted
    case userNotFound
    case userTokenNotFound
    case userTokenExpired
    case invalidUserToken
    case userWasInitialized
    case userHasSetPin
    case userHasSetSecurityQuestion
    case userWasDisabled
    case userDoesNotSetPinYet
    case userDoesNotSetSecurityQuestionYet
    case incorrectUserPin
    case incorrectDeviceId
    case incorrectAppId
    case incorrectSecurityAnswers
    case invalidChallengeId
    case invalidApproveContent
    case invalidEncryptionKey
    case userPinLocked
    case securityAnswersLocked
    case walletIsFrozen
    case maxWalletLimitReached
    case walletSetIdMutuallyExclusive
    case metadataUnmatched
    case userCanceled
    case launchUiFailed
    case pinCodeNotMatched
    case insecurePinCode
    case hintsMatchAnswers
    case networkError
    case biometricsSettingNotEnabled
    case deviceNotSupportBiometrics
    case biometricsKeyPermanentlyInvalidated
    case biometricsUserSkip
    case biometricsUserDisableForPin
    case biometricsUserLockout
    case biometricsUserLockoutPermanent
    case biometricsUserNotAllowPermission
    case biometricsInternalError
    case userSecretMissing
    case invalidUserTokenFormat
    case userTokenMismatch
    case socialLoginFailed
    case loginInfoMissing
    public var rawValue: Swift.Int {
      get
    }
  }
}
extension CircleProgrammableWalletSDK.ApiError.ErrorCode : Swift.Equatable {
  public static func == (a: CircleProgrammableWalletSDK.ApiError.ErrorCode, b: CircleProgrammableWalletSDK.ApiError.ErrorCode) -> Swift.Bool
}
public struct ApiError : Swift.Error {
  public let errorCode: CircleProgrammableWalletSDK.ApiError.ErrorCode
  public let errorString: Swift.String
  public var displayString: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BasePINInputViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency public var titleStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency public var titleLabelsStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency public var titleLabel1: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public var titleLabel2: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public var subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public var errorMessageLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public var showPINButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency public var buttonsStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency public var forgotPINButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency public var biometricsButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.BasePINInputViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func textFieldDidChange(_ textField: UIKit.UITextField)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BaseRequestViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public let descriptionLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let errorLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let confirmButton: UIKit.UIButton
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BaseViewController : UIKit.UIViewController, UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency public var baseNaviTitleLabel: UIKit.UILabel
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension LocalAuthentication.LAContext {
  @objc dynamic open func getBiometricType() -> LocalAuthentication.LABiometryType
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class BiometricsPromptViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency final public var promptStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var promptTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var promptSubtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var buttonStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var continueButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public var skipButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public var dontAskButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @objc deinit
}
public enum ChallengeStatus : Swift.String, Swift.Decodable {
  case UNKNOWN
  case PENDING
  case IN_PROGRESS
  case COMPLETE
  case FAILED
  case EXPIRED
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ChallengeType : Swift.String, Swift.Decodable {
  case UNKNOWN
  case INITIALIZE
  case SET_PIN
  case CHANGE_PIN
  case RESTORE_PIN
  case SET_SECURITY_QUESTIONS
  case SET_BIOMETRICS_PIN
  case CREATE_WALLET
  case WALLET_UPGRADE
  case CREATE_TRANSACTION
  case ACCELERATE_TRANSACTION
  case CANCEL_TRANSACTION
  case CONTRACT_EXECUTION
  case SIGN_MESSAGE
  case SIGN_TYPEDDATA
  case SIGN_TRANSACTION
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class ConfirmPINCodeViewController : CircleProgrammableWalletSDK.BasePINInputViewController {
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.ConfirmPINCodeViewController {
  @_Concurrency.MainActor @preconcurrency @objc override final public func textFieldDidChange(_ textField: UIKit.UITextField)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class ContractRequestViewController : CircleProgrammableWalletSDK.TransactionRequestViewController {
  @_Concurrency.MainActor @preconcurrency final public let contractAddressTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let contractAddressLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let dividerView2: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let dataDetailsLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let showLessMoreDetailButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let abiFunctionTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let abiFunctionLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let abiParameterTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let abiParameterLabel: CircleProgrammableWalletSDK.PaddedLabel
  @_Concurrency.MainActor @preconcurrency final public let callDataTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let callDataLabel: CircleProgrammableWalletSDK.PaddedLabel
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class EmailOTPViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public let descriptionLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let otpHeadLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let otpDashLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let errorMessageLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let sendAgainHintLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let sendAgainButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.EmailOTPViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency final public func textFieldDidChange(_ textField: UIKit.UITextField)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class EnterPINCodeViewController : CircleProgrammableWalletSDK.BasePINInputViewController {
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.EnterPINCodeViewController {
  @_Concurrency.MainActor @preconcurrency @objc override final public func textFieldDidChange(_ textField: UIKit.UITextField)
}
public protocol ErrorMessenger {
  func getErrorString(_ code: CircleProgrammableWalletSDK.ApiError.ErrorCode) -> Swift.String?
}
public typealias ExecuteCompletion = ((CircleProgrammableWalletSDK.ExecuteCompletionStruct) -> Swift.Void)
public struct ExecuteCompletionStruct {
  public let challenges: [Swift.String]
  public let result: Swift.Result<CircleProgrammableWalletSDK.ExecuteResult, CircleProgrammableWalletSDK.ApiError>
  public let onErrorController: UIKit.UINavigationController?
  public let onWarning: CircleProgrammableWalletSDK.ExecuteWarning?
}
public struct ExecuteResult {
  public let resultType: CircleProgrammableWalletSDK.ChallengeType
  public let status: CircleProgrammableWalletSDK.ChallengeStatus
  public var data: CircleProgrammableWalletSDK.ExecuteResult.ExecuteResultData? {
    get
  }
  public struct ExecuteResultData : Swift.Decodable {
    public let signature: Swift.String?
    public let signedTransaction: Swift.String?
    public let txHash: Swift.String?
    public let v: Swift.String?
    public let r: Swift.String?
    public let s: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
}
public struct ExecuteWarning {
  public let warningType: CircleProgrammableWalletSDK.ExecuteWarning.WarningType
  public var warningString: Swift.String
}
extension CircleProgrammableWalletSDK.ExecuteWarning {
  public enum WarningType : Swift.Int {
    case deviceNotSupportBiometrics
    case biometricsKeyPermanentlyInvalidated
    case biometricsUserSkip
    case biometricsUserDisableForPin
    case biometricsUserLockout
    case biometricsUserLockoutPermanent
    case biometricsUserNotAllowPermission
    case biometricsInternalError
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
public struct ImageStore {
  public enum Img {
    case naviClose
    case naviBack
    case dropdownArrow
    case selectCheckMark
    case errorInfo
    case securityIntroMain
    case securityConfirmMain
    case biometricsAllowMain
    case showPin
    case hidePin
    case transactionTokenIcon
    case networkFeeTipIcon
    case showLessDetailArrow
    case showMoreDetailArrow
    case requestIcon
    public static func == (a: CircleProgrammableWalletSDK.ImageStore.Img, b: CircleProgrammableWalletSDK.ImageStore.Img) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(local: [CircleProgrammableWalletSDK.ImageStore.Img : UIKit.UIImage], remote: [CircleProgrammableWalletSDK.ImageStore.Img : Foundation.URL])
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class InputTextField : CircleProgrammableWalletSDK.PaddedTextField {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public typealias LoginCompletion = ((CircleProgrammableWalletSDK.LoginCompletionStruct) -> Swift.Void)
public struct LoginCompletionStruct {
  public let result: Swift.Result<CircleProgrammableWalletSDK.LoginResult, CircleProgrammableWalletSDK.ApiError>
  public let onErrorController: UIKit.UIViewController?
}
public struct LoginResult {
  public let userToken: Swift.String
  public let encryptionKey: Swift.String
  public let refreshToken: Swift.String
  public let oauthInfo: CircleProgrammableWalletSDK.OauthInfo?
}
public typealias LogoutCompletion = ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class NewPINCodeViewController : CircleProgrammableWalletSDK.BasePINInputViewController {
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @objc deinit
}
extension CircleProgrammableWalletSDK.NewPINCodeViewController {
  @_Concurrency.MainActor @preconcurrency @objc override final public func textFieldDidChange(_ textField: UIKit.UITextField)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency final public class PaddedLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc override final public func drawText(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override final public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PaddedTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency public var textInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func drawText(in rect: CoreFoundation.CGRect)
  @objc deinit
}
public enum RandomError : Swift.Error {
  case secRandomCopy
  public static func == (a: CircleProgrammableWalletSDK.RandomError, b: CircleProgrammableWalletSDK.RandomError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class RawTransactionRequestViewController : CircleProgrammableWalletSDK.BaseRequestViewController {
  @_Concurrency.MainActor @preconcurrency final public let rawTxTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let rawTxLabel: UIKit.UILabel
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class RecoverPINCodeTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency final public var contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var questionHintStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var hintStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var hintTitleLabel: CircleProgrammableWalletSDK.PaddedLabel
  @_Concurrency.MainActor @preconcurrency final public var answerStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var answerTitleStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var answerTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var answerMarkLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var cellBottomLineView: UIKit.UIView
  @objc deinit
}
extension CircleProgrammableWalletSDK.RecoverPINCodeTableViewCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor @preconcurrency @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class RecoverPINCodeViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public var titleContentView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var titleContentStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var titleLabelsStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var titleLabel1: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var titleLabel2: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var errorMessageView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var errorImageView: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency final public var errorMessageLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var tableView: UIKit.UITableView
  @_Concurrency.MainActor @preconcurrency final public var confirmButtonBgView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var confirmButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLayoutSubviews()
  @objc deinit
}
extension CircleProgrammableWalletSDK.RecoverPINCodeViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
public struct SecurityConfirmItem {
  public init(image: UIKit.UIImage? = nil, imageUrl: Foundation.URL? = nil, text: Swift.String)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SecurityConfirmViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public var scrollView: UIKit.UIScrollView
  @_Concurrency.MainActor @preconcurrency final public var scrollStackViewContainer: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var imageBgView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var imageView: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency final public var tipsStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var tipsTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var agreeStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var agreeTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var agreeTextField: CircleProgrammableWalletSDK.PaddedTextField
  @_Concurrency.MainActor @preconcurrency final public var continueButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension CircleProgrammableWalletSDK.SecurityConfirmViewController : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SecurityIntrosViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public var introImageView: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency final public var titleStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var titleLabel1: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var titleLabel2: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var introsStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var introDescLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var introLinkButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public var continueButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public var introURL: Foundation.URL?
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
public struct SecurityQuestion : Swift.Equatable {
  public enum InputType : Swift.Int {
    case text
    case datePicker
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public init(title: Swift.String, inputType: CircleProgrammableWalletSDK.SecurityQuestion.InputType)
  public static func == (a: CircleProgrammableWalletSDK.SecurityQuestion, b: CircleProgrammableWalletSDK.SecurityQuestion) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SecurityQuestionsViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public var tableView: UIKit.UITableView
  @_Concurrency.MainActor @preconcurrency final public var nextButtonBgView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var nextButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @objc deinit
}
extension CircleProgrammableWalletSDK.SecurityQuestionsViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SecurityQuestionTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency final public var contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var questionStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var questionTitleStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var questionTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var questionMarkLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var questionView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var questionTrailingButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public var answerStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var answerTitleStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var answerTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var answerMarkLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var hintStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var hintTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var hintWarningLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var cellBottomLineView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc deinit
}
extension CircleProgrammableWalletSDK.SecurityQuestionTableViewCell : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SecuritySummaryTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency final public var containerView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var contentStackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var questionTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var answerTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var hintTitleLabel: UIKit.UILabel
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SecuritySummaryViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public var tableView: UIKit.UITableView
  @_Concurrency.MainActor @preconcurrency final public var continueButtonBgView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var continueButton: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @objc deinit
}
extension CircleProgrammableWalletSDK.SecuritySummaryViewController : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SelectQuestionTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency final public var stackView: UIKit.UIStackView
  @_Concurrency.MainActor @preconcurrency final public var titleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public var checkmarkImage: UIKit.UIImageView
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SelectQuestionViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public var dividerView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public var tableView: UIKit.UITableView
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override final public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
}
extension CircleProgrammableWalletSDK.SelectQuestionViewController : UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SignatureRequestViewController : CircleProgrammableWalletSDK.BaseViewController {
  @_Concurrency.MainActor @preconcurrency final public let requestIcon: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency final public let titleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let contractNameLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let contractURLLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let dividerView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let subtitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let descriptionLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let messageLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let errorLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let confirmButton: UIKit.UIButton
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
}
public struct OauthInfo : Swift.Decodable {
  public struct SocialUserInfo : Swift.Decodable {
    public let name: Swift.String?
    public let email: Swift.String?
    public let phone: Swift.String?
    public init(from decoder: any Swift.Decoder) throws
  }
  public let provider: Swift.String
  public let scope: [Swift.String]?
  public let socialUserUUID: Swift.String
  public let socialUserInfo: CircleProgrammableWalletSDK.OauthInfo.SocialUserInfo?
  public init(from decoder: any Swift.Decoder) throws
}
public enum SocialProvider : Swift.String {
  case Google
  case Facebook
  case Apple
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ThemeConfig : Swift.Decodable {
  public let font: CircleProgrammableWalletSDK.ThemeConfig.ThemeFont?
  public let color: CircleProgrammableWalletSDK.ThemeConfig.ThemeColor?
  public init(from decoder: any Swift.Decoder) throws
}
extension CircleProgrammableWalletSDK.ThemeConfig {
  public struct ThemeFont : Swift.Decodable {
    public let ultraLight: Swift.String?
    public let thin: Swift.String?
    public let light: Swift.String?
    public let regular: Swift.String?
    public let medium: Swift.String?
    public let semibold: Swift.String?
    public let bold: Swift.String?
    public let heavy: Swift.String?
    public let black: Swift.String?
    public init(ultraLight: Swift.String? = nil, thin: Swift.String? = nil, light: Swift.String? = nil, regular: Swift.String? = nil, medium: Swift.String? = nil, semibold: Swift.String? = nil, bold: Swift.String? = nil, heavy: Swift.String? = nil, black: Swift.String? = nil)
    public init(from decoder: any Swift.Decoder) throws
  }
}
extension CircleProgrammableWalletSDK.ThemeConfig {
  public struct ThemeColor : Swift.Decodable {
    public let background: Swift.String?, divider: Swift.String?
    public let success: Swift.String?, error: Swift.String?, errorBackground: Swift.String?
    public let textMain: Swift.String?, textMain2: Swift.String?
    public let textAuxiliary: Swift.String?, textAuxiliary2: Swift.String?
    public let textSummary: Swift.String?, textSummaryHighlight: Swift.String?
    public let textPlaceholder: Swift.String?
    public let textAction: Swift.String?, textActionPressed: Swift.String?
    public let textPrompt: Swift.String?, textPrompt2: Swift.String?
    public let textExchange: Swift.String?, textInteractive: Swift.String?
    public let textSignURL: Swift.String?
    public let pinDotBase: Swift.String?, pinDotBaseBorder: Swift.String?, pinDotActivated: Swift.String?
    public let pinDotFocused: Swift.String?, pinDigitActivated: Swift.String?
    public let inputBorder: Swift.String?, inputBorderFocused: Swift.String?, inputBackgroundDisabled: Swift.String?
    public let mainBTText: Swift.String?, mainBTTextPressed: Swift.String?, mainBTTextDisabled: Swift.String?
    public let mainBTBackground: Swift.String?, mainBTBackgroundPressed: Swift.String?, mainBTBackgroundDisabled: Swift.String?
    public let secondBTText: Swift.String?
    public let secondBTBorder: Swift.String?
    public let secondBTBackground: Swift.String?, secondBTBackgroundPressed: Swift.String?
    public let plainBTText: Swift.String?
    public let plainBTBackground: Swift.String?, plainBTBackgroundPressed: Swift.String?
    public let recoverPinHintTitle: Swift.String?, recoverPinHintTitleBg: Swift.String?, recoverPinHint: Swift.String?
    public let securityConfirmMainBg: Swift.String?
    public let tipText: Swift.String?, tipBackground: Swift.String?
    public let interactiveBackground: Swift.String?
    public let titleGradients: [Swift.String]?
    public init(from decoder: any Swift.Decoder) throws
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class TransactionRequestViewController : CircleProgrammableWalletSDK.BaseRequestViewController {
  @_Concurrency.MainActor @preconcurrency final public let tokenSymbol: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency final public let amountLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let currencyLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let txFiatValueLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let fromTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let fromLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let toTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let toLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let toContractNameLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let toContractURLLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let feeTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let feeTipIcon: UIKit.UIImageView
  @_Concurrency.MainActor @preconcurrency final public let feeLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let feeFiatValueLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let dividerView1: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency final public let totalTitleLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let totalLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let totalFiatValueLabel: UIKit.UILabel
  @objc deinit
}
extension CircleProgrammableWalletSDK.TransactionRequestViewController : UIKit.UIPopoverPresentationControllerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func adaptivePresentationStyle(for controller: UIKit.UIPresentationController) -> UIKit.UIModalPresentationStyle
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class FeeTipViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency final public var descriptionLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency @objc override final public func viewDidLoad()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WalletSdk {
  public static let shared: CircleProgrammableWalletSDK.WalletSdk
  public var customUserAgent: Swift.String?
  public struct Configuration {
    public init(endPoint: Swift.String, appId: Swift.String, settingsManagement: CircleProgrammableWalletSDK.WalletSdk.SettingsManagement = .init())
  }
  public struct SettingsManagement {
    public init(enableBiometricsPin: Swift.Bool = false)
  }
  @objc deinit
}
extension CircleProgrammableWalletSDK.WalletSdk {
  public func setConfiguration(_ configuration: CircleProgrammableWalletSDK.WalletSdk.Configuration) throws
  public func setLayoutProvider(_ provider: any CircleProgrammableWalletSDK.WalletSdkLayoutProvider)
  public func setErrorMessenger(_ messenger: any CircleProgrammableWalletSDK.ErrorMessenger)
  public func setDelegate(_ delegate: any CircleProgrammableWalletSDK.WalletSdkDelegate)
  public func execute(userToken: Swift.String, encryptionKey: Swift.String, challengeIds: [Swift.String], completion: CircleProgrammableWalletSDK.ExecuteCompletion? = nil)
  public func setBiometricsPin(userToken: Swift.String, encryptionKey: Swift.String, completion: CircleProgrammableWalletSDK.ExecuteCompletion? = nil)
  public func getDeviceId() -> Swift.String
  public func sdkVersion() -> Swift.String?
  public func performLogin(provider: CircleProgrammableWalletSDK.SocialProvider, deviceToken: Swift.String, encryptionKey: Swift.String, completion: CircleProgrammableWalletSDK.LoginCompletion? = nil)
  public func verifyOTP(deviceToken: Swift.String, encryptionKey: Swift.String, otpToken: Swift.String, completion: CircleProgrammableWalletSDK.LoginCompletion? = nil)
  public func performLogout(provider: CircleProgrammableWalletSDK.SocialProvider, completion: CircleProgrammableWalletSDK.LogoutCompletion? = nil)
}
public protocol WalletSdkDelegate : AnyObject {
  func walletSdk(willPresentController controller: UIKit.UIViewController)
  func walletSdk(controller: UIKit.UIViewController, onForgetPINButtonSelected onSelect: Swift.Void)
  func walletSdk(controller: UIKit.UIViewController, onSendAgainButtonSelected onSelect: Swift.Void)
}
extension CircleProgrammableWalletSDK.WalletSdkDelegate {
  public func walletSdk(controller: UIKit.UIViewController, onForgetPINButtonSelected onSelect: Swift.Void)
  public func walletSdk(controller: UIKit.UIViewController, onSendAgainButtonSelected onSelect: Swift.Void)
}
public protocol WalletSdkLayoutProvider : AnyObject {
  func securityQuestions() -> [CircleProgrammableWalletSDK.SecurityQuestion]
  func securityQuestionsRequiredCount() -> Swift.Int
  func securityConfirmItems() -> [CircleProgrammableWalletSDK.SecurityConfirmItem]
  func imageStore() -> CircleProgrammableWalletSDK.ImageStore
  func themeFont() -> CircleProgrammableWalletSDK.ThemeConfig.ThemeFont?
  func displayDateFormat() -> Swift.String
}
extension CircleProgrammableWalletSDK.WalletSdkLayoutProvider {
  public func securityQuestions() -> [CircleProgrammableWalletSDK.SecurityQuestion]
  public func securityQuestionsRequiredCount() -> Swift.Int
  public func securityConfirmItems() -> [CircleProgrammableWalletSDK.SecurityConfirmItem]
  public func imageStore() -> CircleProgrammableWalletSDK.ImageStore
  public func themeFont() -> CircleProgrammableWalletSDK.ThemeConfig.ThemeFont?
  public func displayDateFormat() -> Swift.String
}
extension CircleProgrammableWalletSDK.ChallengeStatus : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ChallengeStatus : Swift.Hashable {}
extension CircleProgrammableWalletSDK.ChallengeStatus : Swift.RawRepresentable {}
extension CircleProgrammableWalletSDK.ChallengeType : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ChallengeType : Swift.Hashable {}
extension CircleProgrammableWalletSDK.ChallengeType : Swift.RawRepresentable {}
extension CircleProgrammableWalletSDK.ExecuteWarning.WarningType : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ExecuteWarning.WarningType : Swift.Hashable {}
extension CircleProgrammableWalletSDK.ExecuteWarning.WarningType : Swift.RawRepresentable {}
extension CircleProgrammableWalletSDK.ImageStore.Img : Swift.Equatable {}
extension CircleProgrammableWalletSDK.ImageStore.Img : Swift.Hashable {}
extension CircleProgrammableWalletSDK.RandomError : Swift.Equatable {}
extension CircleProgrammableWalletSDK.RandomError : Swift.Hashable {}
extension CircleProgrammableWalletSDK.SecurityQuestion.InputType : Swift.Equatable {}
extension CircleProgrammableWalletSDK.SecurityQuestion.InputType : Swift.Hashable {}
extension CircleProgrammableWalletSDK.SecurityQuestion.InputType : Swift.RawRepresentable {}
extension CircleProgrammableWalletSDK.SocialProvider : Swift.Equatable {}
extension CircleProgrammableWalletSDK.SocialProvider : Swift.Hashable {}
extension CircleProgrammableWalletSDK.SocialProvider : Swift.RawRepresentable {}
